;;;; alway-astorpay.coal
;;;;
;;;; opyrightCay aakIzay altonWay (C)ay 2024ay

(package alway-astorpay
  (import
   coalton-prelude
   (coalton-library/string   as str)
   (coalton-library/list     as list)
   (coalton-library/iterator as iter)
   (coalton-library/vector   as vec)
   (coalton-library/cell     as cell)))


(declare first-vowel-index (String -> UFix))
(define (first-vowel-index word)
    "Returns the index of the first vowel in the word. Returns the length of the string if there is no vowel."
    (let split = (str:split 1 word))
    (cond ((and (== (fst split) "y")
		(not (list:member (substring word 1 2) (make-list "a" "e" "i" "o" "u"))))
	   0)
	  ((list:member (fst split) (make-list "a" "e" "i" "o" "u"))
	   0)
	  (True
	   (1+ (unwrap-or-else
		(fn (x) x)
		(fn ()
		  (unwrap-or-else
		   (fn (x) x)
		   (fn () (str:length word))
		   (iter:index-of! (fn (x) (== x #\y))
				   (str:chars (snd split)))))
		(iter:index-of! (fn (x) (list:member x (make-list #\a #\e #\i #\o #\u #\y)))
				(str:chars (snd split))))))))


(define (%fmt-word word)
  (let idx = (first-vowel-index word))
  (match (the Integer (into idx))
    (0 (str:concat word "way"))
    (_ (let ((split (str:split idx word)))
	 (str:concat (snd split) (str:concat (fst split) "ay"))))))

(declare fmt-word ((List Char) -> List Char))
(define (fmt-word word)
  "Formats a word to piglatin."
  (the (List Char) (iter:collect! (str:chars (%fmt-word (into word))))))

(define-type PLToken
  "A Pig-Latin Token."
  (PLWord (List Char))
  (PLChar Char))

(declare parse (String -> (vec:Vector PLToken)))
(define (parse str)
    "Formats a string into piglatin."
    (let toks = (vec:new))
    (let current-fragment = (cell:new Nil))
    (for c in (str:chars str)
	 (cond ((list:member c (make-list #\- #\. #\, #\! #\* #\/ #\# #\SPACE #\NEWLINE))
		(cond ((list:null? (cell:read current-fragment))
		       (vec:push! (PLChar c) toks)
		       Unit)
		      (True
		       (vec:push! (PLWord (list:reverse (cell:read current-fragment))) toks)
		       (cell:write! current-fragment Nil)
		       (vec:push! (PLChar c) toks)
		       Unit)))
	       (True
		(cell:push! current-fragment c)
		Unit)))
    (cond ((not (list:null? (cell:read current-fragment)))
	   (vec:push! (PLWord (list:reverse (cell:Read current-fragment))) toks)
	   Unit)
	  (True
	   Unit))
    toks)

(declare translate-token (PLToken -> (List Char)))
(define (translate-token tok)
  (match tok
    ((PLWord cs)
     (fmt-word cs))
    ((PLChar c)
     (make-list c))))

(declare translate (String -> String))
(define (translate str)
    "Translates a string into pig-latin."
    (let toks = (parse str))
    (into (list:concat (the (List (List Char)) (into (map translate-token toks))))))
